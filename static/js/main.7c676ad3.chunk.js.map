{"version":3,"sources":["logic.js","errors.js","Form.js","TipCalculator.js","serviceWorker.js","index.js"],"names":["CalculateTotalWithTip","props","showResults","peopleValid","billValid","parseFloat","bill","service","CalculateTip","IndividualPrice","pricePerPerson","people","toFixed","isNaN","DisplayPrice","className","IsResultNaN","InputError","TipForm","validateBill","state","setState","validatePeople","handleBillChange","bind","handleServiceChange","handlePeopleChange","handleSubmit","event","this","target","value","preventDefault","validateBil","console","log","type","id","placeholder","onChange","onClick","Component","TipCalculator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c676ad3.chunk.js","sourcesContent":["import React from 'react'\n\nfunction CalculateTip(props){\n    return(\n        (props.showResults && props.peopleValid && props.billValid) ? (parseFloat(props.bill) * parseFloat(props.service)) : null\n     );\n}\n\nfunction CalculateTotalWithTip (props) {\n    return(\n        (props.showResults && props.peopleValid && props.billValid) ? (parseFloat(props.bill) + parseFloat(CalculateTip(props))) : null\n    );\n}\n\nfunction IndividualPrice (props) {\n    var pricePerPerson = (parseFloat(CalculateTotalWithTip(props)) / parseFloat(props.people)).toFixed(2);\n    return(\n        isNaN(pricePerPerson) ? 0 : pricePerPerson\n    );\n}\n\n\nfunction DisplayPrice (props) {\n    return(\n        <div className=\"mb-3 pt-5 pb-5 result\">\n            <h3>Each Person pays:</h3>\n            <h1>$ <IndividualPrice \n                bill={props.bill} \n                service={props.service}\n                people={props.people} \n                showResults={props.showResults}\n                billValid={props.billValid}\n                peopleValid={props.peopleValid}/> \n            </h1>  \n        </div>\n    );\n}\n\nfunction IsResultNaN (props){\n    return(\n        ((props.showResults && props.peopleValid && props.billValid) ? \n            <DisplayPrice \n                bill={props.bill} \n                service={props.service}\n                people={props.people} \n                showResults={props.showResults}\n                billValid={props.billValid}\n                peopleValid={props.peopleValid}  /> : null\n        )\n        \n    )\n}\n\n export default IsResultNaN;\n","import React from 'react'\n\nfunction InputError () {\n    return(\n        <div className=\"error\">\n            <p>Please enter a valid input </p>\n        </div>\n    );\n}\n\n\n\n export default InputError;\n","import React, {Component} from 'react';\nimport IsResultNaN from './logic';\nimport InputError from './errors';\n\nclass TipForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            bill : '', \n            service :'', \n            people :'',\n            showResults: false,\n            billValid: true,\n            peopleValid: true\n        };\n\n        this.handleBillChange = this.handleBillChange.bind(this);\n        this.handleServiceChange = this.handleServiceChange.bind(this);\n        this.handlePeopleChange = this.handlePeopleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n}\n\n    handleBillChange(event){\n        this.setState({bill:event.target.value},\n            () => {\n                this.validateBill(); \n            });\n    };\n\n    handleServiceChange(event){\n        this.setState({service:event.target.value});\n        this.setState({showResults:false});\n    };\n\n    handlePeopleChange(event){\n        this.setState({people:event.target.value},\n            () => {\n                this.validatePeople();\n            });\n    };\n\n   \n\n    validateBill = (props) => {\n       // console.log(this.state.bill);\n        (this.state.bill) > 0 ? this.setState({billValid:true}) : this.setState({billValid:false});\n        this.setState({showResults:false});\n    };\n\n    validatePeople = (props) => {\n        (this.state.people) > 0 ? this.setState({peopleValid:true}) : this.setState({peopleValid:false});\n        this.setState({showResults:false});\n    };\n    \n    handleSubmit(event) {\n        event.preventDefault(); \n        this.validateBil();\n        this.validatePeople();\n        this.setState({showResults:true});\n        console.log(\"Submitted\");\n        console.log(this.state);\n    };\n\n\n    render(){\n        return(\n            <div>\n                <div>\n                    { this.state.showResults ? \n                    <IsResultNaN \n                            bill={this.state.bill} \n                            service={this.state.service}\n                            people={this.state.people} \n                            showResults={this.state.showResults}\n                            billValid={this.state.billValid}\n                            peopleValid={this.state.peopleValid}\n                            /> \n                    : null }\n                </div>    \n\n                <div className=\"form pt-3 pb-5\">\n                    <div className=\"pb-3 form-group\">\n                        <label>How much is your bill ?</label>\n                        <input className =\"form-control\" type=\"number\" id=\"bill-amt\" placeholder=\"example: 240\" onChange={this.handleBillChange}/>\n                        <div>\n                            {this.state.billValid ?\n                            null: <InputError /> \n                        }\n                        </div> \n                    </div>\n                    <div className=\"pb-3 form-group\">\n                        <label>How was the service today ?</label>\n                        <select className=\"form-control\" id=\"service\" onChange={this.handleServiceChange}>\n                            <option value=\"0\"> SELECT OPTION </option>\n                            <option value=\"0.30\"> 30% - Exceptional </option>\n                            <option value=\"0.20\"> 20% - Good </option>\n                            <option value=\"0.15\"> 15% - Average </option>\n                            <option value=\"0.10\"> 10% - Not good </option>\n                            <option value=\"0.05\"> 5% - Terrible </option>\n                        </select>\n                    </div>\n                    <div className=\"pb-5 form-group\">\n                        <label>How many people are splitting the bill ?</label>\n                        <input className=\"form-control\" type=\"number\" id=\"people\" placeholder=\"example: 2\" onChange={this.handlePeopleChange} />\n                        <div>\n                            {this.state.peopleValid ?\n                            null: <InputError /> \n                        }\n                        </div>\n                    </div>\n                    <div>\n                        <button className=\"btn submit-btn btn-block btn-lg\" type=\"submit\" onClick={this.handleSubmit} >SUBMIT</button>\n                    </div>\n                \n                </div> \n            </div>\n            \n\n        );\n   }\n\n    \n}\n\n\nexport default TipForm;","import React from 'react';\nimport TipForm from './Form';\n\nfunction TipCalculator(){\n        return(\n        <div className=\"TipForm \">\n                <div className=\"text-center pb-5\">\n                    <h1 className=\"pt-5 appTitle \">Tip Calculator</h1>\n                    <h5 className=\"pt-4 container\"><strong>Instructions:</strong> Fill in the form with your details and let us do the work! </h5>\n                </div>\n\n                <div className=\"text-center container\">\n                    <TipForm />\n                </div>\n                \n            </div>\n    );\n}\n\nexport default TipCalculator;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TipCalculator from './TipCalculator';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nfunction App() {\n    return ( \n        <TipCalculator />\n    );\n}\n\nReactDOM.render( < App /> , document.getElementById('root'))\n\n\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}